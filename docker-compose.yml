version: '2.1'

services:

  rabbitmq:
    image: rabbitmq
    build: ./queue
    restart: always

  redis:
    container_name: redis
    image: redis
    ports:
     - "6379:6379"
    healthcheck:
      test: exit 0

  mongo:
    image: mongo:latest
    container_name: "mongodb"
    ports:
        - 27017:27017
    command: mongod --smallfiles --logpath=/dev/null # --quiet

  
  # ----------------------------------------
  # ----------------------------------------
  # Users service configuration 
  # ----------------------------------------
  # ----------------------------------------

  users-service-db:
    container_name: users-service-db
    build: ./UsersService/db
    ports:
      - 5435:5432  # expose ports - HOST:CONTAINER
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: exit 0

  userservice:
    image: userservice
    build: ./UsersService
    environment:
      - APP_RD_ADDRESS=redis:6379
      - APP_RD_AUTH=password
      - APP_RD_DBNAME=0
      - APP_SETTINGS=project.config.DevelopmentConfig
      - DATABASE_URL=postgres://postgres:postgres@users-service-db:5432/users_prod?sslmode=disable
      - DATABASE_DEV_URL=postgres://postgres:postgres@users-service-db:5432/users_dev?sslmode=disable
      - DATABASE_TEST_URL=postgres://postgres:postgres@users-service-db:5432/users_test?sslmode=disable
    depends_on:
      users-service-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    links:
      - users-service-db
      - redis

  # ----------------------------------------
  # ----------------------------------------
  # News Orchestrator service configuration 
  # ----------------------------------------
  # ----------------------------------------

  orchestrator_news_service:
    image: orchestrator_news_service
    build: ./NewsOrcherstrator
    volumes:
      - '.:/usr/src/app'
    environment:
      - APP_SETTINGS=config.DevelopmentConfig
    depends_on:
      - famous_news_service
      - rabbitmq
    links:
      - famous_news_service
      - rabbitmq

  # ----------------------------------------
  # ----------------------------------------
  # Famous service configuration 
  # ----------------------------------------
  # ----------------------------------------

  querydb_famous:
    image: querydb_famous
    build: ./FamousNewsService/query/db
    restart: always

  commanddb_famous:
    image: commanddb_famous
    build: ./FamousNewsService/command/db
    restart: always
    healthcheck:
      test: exit 0

  famous_news_service:
    image: famous_news_service
    build: ./FamousNewsService
    volumes:
      - '.:/usr/src/app'
    environment:
      - QUERYBD_HOST=mongodb://querydb_famous:27017/
      - QUEUE_HOST=amqp://guest:guest@rabbitmq
      - COMMANDDB_HOST=postgres://postgres:postgres@commanddb_famous:5432/news_prod?sslmode=disable
      - COMMANDDB_DEV_HOST=postgres://postgres:postgres@commanddb_famous:5432/news_dev?sslmode=disable
      - COMMANDDB_TEST_HOST=postgres://postgres:postgres@commanddb_famous:5432/news_test?sslmode=disable
    depends_on:
      - querydb_famous
      - commanddb_famous
      - rabbitmq
    links:
      - querydb_famous
      - commanddb_famous
      - rabbitmq


  # ----------------------------------------
  # ----------------------------------------
  # Politics service configuration 
  # ----------------------------------------
  # ----------------------------------------

  politics_news_service:
    image: politics_news_service
    build: ./PoliticsNewsService
    volumes:
      - '.:/usr/src/app'
    environment:
      - APP_SETTINGS=config.DevelopmentConfig
      - DATABASE_HOST=mongodb://mongo:27017/
    depends_on:
      - mongo
    links:
      - mongo


  # ----------------------------------------
  # ----------------------------------------
  # Sports service configuration 
  # ----------------------------------------
  # ----------------------------------------

  sports_news_service:
    image: sports_news_service
    build: ./SportsNewsService
    volumes:
      - '.:/usr/src/app'
    environment:
      - APP_SETTINGS=config.DevelopmentConfig
      - DATABASE_HOST=mongodb://mongo:27017/
    depends_on:
      - mongo
    links:
      - mongo


  # ----------------------------------------
  # ----------------------------------------
  # NGINX configuration 
  # ----------------------------------------
  # ----------------------------------------

  proxy:
    container_name: loadbalance
    build: ./nginx
    ports:
      - "80:80"
    links:
      - userservice
      - famous_news_service
      - politics_news_service
      - sports_news_service